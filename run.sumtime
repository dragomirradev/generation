#!/bin/bash
# USAGE: ./run.sumtime

s1=97
s2=97
s3=97
s4=96
s5=96

train1=`expr $s5 + $s2 + $u3 + $s4`
train2=`expr $s1 + $s5 + $s3 + $s4`
train3=`expr $s1 + $s2 + $s5 + $s4`
train4=`expr $s1 + $s2 + $s3 + $s5`
train5=`expr $s1 + $s2 + $s3 + $s4`

total=`expr $s1 + $s2 + $s3 + $s4 + $s5`

echo "Training SUMTIME"

mkdir -p outs/sumtime

# -- DATA
if [ -d data/sumtime.5 ]; then
	echo "Found data split directory"
else 
	echo "Making Data..."
	cd data
	./makeData.sh
	cd ..
fi

# -- FEATURES
cd features ; make ; cd ..


# -- ALIGN
align(){
	cat outs/sumtime/save.$1.aligns &> /dev/null
	if [ "$?" != "0" ]; then
		java \
				-cp dist/generation.jar:etc/lib.jar:etc/aux.jar:etc/scala-library.jar \
				-Xmx500M -server generation.Alignment \
			-modelType event3 -inputFileExt events -inputFormat raw -initNoise 0 \
			-outputFullPred -useEventTypeDistrib true -oneEventPerExample 0,0 \
			-dontCrossPunctuation true \
			-disallowConsecutiveRepeatFields true -Options.stage2.numIters 10 \
			-newEventTypeFieldPerWord 0,0 -indepFields 0,0 \
			-indepEventTypes 0,-1 \
			-Options.stage2.smoothing 0.1 \
				-create -overwrite \
				-testIndexFile outs/sumtime/index.txt \
				-execPoolDir outs/sumtime \
			-inputPaths data/sumtime.$1 \
			-alignSavePath outs/sumtime/save.$1.aligns \
			-paramSavePath outs/sumtime/save.$1.params \
			-trainStart 0 -trainEnd $2 -testStart $2 -testEnd $total
	else
		echo "Using saved alignment for fold $1"
	fi
}
align 1 $train1
align 2 $train2
align 3 $train3
align 4 $train4
align 5 $train5

# -- RUN
run(){
	java \
		-cp dist/generation.jar:etc/lib.jar:etc/aux.jar:etc/scala-library.jar:features/features.jar \
		-Xmx500M -server generation.Generation \
		-useTemplates \
		-eventModel maxent -fieldModel maxent -wordModel perceptron \
		-sigmaEvent 1.5 -sigmaFieldSet 1.5 -sigmaTemplate 1.5 \
		-maxentIterations 100 -perceptronIterations 10 \
		-prohibitNonNumericNum -maxTemplates 100 -minTemplCount 0 \
			-featEventMarkov -featEventTail 2 -featEventAllTails \
			-featEventRep -featEventHist -featEventLMStop -featEventVal fuzzy \
			-featFSPrior -featFSFirst -featFSVal fuzzy \
			-featTemplMarkov -featTemplLM -lmFactor 1.0 -featTemplPrior \
			-featTemplHierarchical \
			-featTemplValDiff -valDiffThreshold 3 -featTemplVal fuzzy \
			-lm event3 -numGrams 3 -lmInputPath data/sumtime.1 -lmFileExt text \
		-eventChoice features.SumtimeEventChoice \
		-fieldsetChoice features.SumtimeFieldSetChoice \
		-templateChoice features.SumtimeTemplateChoice \
		-templateFillChoice features.SumtimeTemplateFillChoice \
		-forceTrueEvent -heuristicAlign -entityRegex "^(n|s|e|w)(n|s|e|w)?(n|s|e|w)?(-(n|s|e|w)(n|s|e|w)?(n|s|e|w)?)?$" \
			-modelType event3 -inputFileExt events -inputFormat raw -initNoise 0 \
			-outputFullPred -useEventTypeDistrib true -oneEventPerExample 0,-1 \
			-dontCrossPunctuation false \
			-disallowConsecutiveRepeatFields true -Options.stage2.numIters 10 \
			-newEventTypeFieldPerWord 0,0 -indepFields 0,0 \
			-indepEventTypes 0,-1 \
			-Options.stage2.smoothing 0.1 \
		-create -overwrite \
		-testIndexFile /dev/null \
		-execPoolDir outs/sumtime \
		-loadParams -loadAligns \
			-inputPaths data/sumtime.$1 \
			-alignSavePath outs/sumtime/save.$1.aligns \
			-paramSavePath outs/sumtime/save.$1.params \
			-trainStart 0 -trainEnd $2 -testStart $2 -testEnd $total
}
run 1 $train2001
run 2 $train2002
run 3 $train2003
run 4 $train2004
run 5 $train2005

# -- Compile Score
#(get indexed lines)
size=$(echo `wc outs/robocup/index.txt` | awk '{print $1}')
l1=$(sed "`expr $size - 4`q;d" outs/sumtime/index.txt)
l2=$(sed "`expr $size - 3`q;d" outs/sumtime/index.txt)
l3=$(sed "`expr $size - 2`q;d" outs/sumtime/index.txt)
l4=$(sed "`expr $size - 1`q;d" outs/sumtime/index.txt)
l5=$(sed "`expr $size - 0`q;d" outs/sumtime/index.txt)

tail -n 5 outs/sumtime/index.txt

echo ""
echo "AVERAGE STATISTICS"
echo "----------"
#(bleu score)
bleu1=$(expr `echo "$l1" | awk '{print $2}'`)
bleu2=$(expr `echo "$l2" | awk '{print $2}'`)
bleu3=$(expr `echo "$l3" | awk '{print $2}'`)
bleu4=$(expr `echo "$l4" | awk '{print $2}'`)
bleu5=$(expr `echo "$l5" | awk '{print $2}'`)
bleu=$(calc "( $bleu1*$s1 + $bleu2*$s2 + $bleu3*$s3 + $bleu4*$s4 + $bleu5*$s5) / ($s1+$s2+$s3+$s4+$s5 )" )
echo "BLEU SCORE: $bleu"

#(f1 score)
F1=$(expr `echo "$l1" | awk '{print $3}'`)
F2=$(expr `echo "$l2" | awk '{print $3}'`)
F3=$(expr `echo "$l3" | awk '{print $3}'`)
F4=$(expr `echo "$l4" | awk '{print $3}'`)
F5=$(expr `echo "$l5" | awk '{print $3}'`)
F1=$(calc "( $F1*$s1 + $F2*$s2 + $F3*$s3 + $F4*$s4 + $F5*$s5 ) / ($s1+$s2+$s3+$s4+$s5 )" )
echo "F1 SCORE: $F1"

#(precision)
P1=$(expr `echo "$l1" | awk '{print $5}'`)
P2=$(expr `echo "$l2" | awk '{print $5}'`)
P3=$(expr `echo "$l3" | awk '{print $5}'`)
P4=$(expr `echo "$l4" | awk '{print $5}'`)
P5=$(expr `echo "$l5" | awk '{print $5}'`)
prec=$(calc "( $P1*$s1 + $P2*$s2 + $P3*$s3 + $P4*$s4 + $P5*$s5 ) / ($s1+$s2+$s3+$s4+$s5 )" )
echo "PRECISION: $prec"

#(recall)
R1=$(expr `echo "$l1" | awk '{print $6}'`)
R2=$(expr `echo "$l2" | awk '{print $6}'`)
R3=$(expr `echo "$l3" | awk '{print $6}'`)
R4=$(expr `echo "$l4" | awk '{print $6}'`)
R5=$(expr `echo "$l5" | awk '{print $6}'`)
recall=$(calc "( $R1*$s1 + $R2*$s2 + $R3*$s3 + $R4*$s4 + $R5*$s5 ) / ($s1+$s2+$s3+$s4+$s5 )" )
echo "RECALL: $recall"

echo "----------"
echo ""
